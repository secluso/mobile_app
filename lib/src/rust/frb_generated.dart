// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/lock_manager.dart';
import 'api/logger.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 1501830740;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_secluso_flutter',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<SendToDartLogger> crateApiLoggerSendToDartLoggerNew({
    required LevelFilter level,
  });

  Stream<LogEntry> crateApiLoggerSendToDartLoggerSetStreamSink();

  Future<bool> crateApiLockManagerAcquireLock({required String path});

  Stream<LogEntry> crateApiLoggerCreateLogStream();

  Future<String> crateApiDecryptMessage({
    required String clientTag,
    required String cameraName,
    required List<int> data,
  });

  Future<String> crateApiDecryptThumbnail({
    required String cameraName,
    required String encFilename,
    required String pendingMetaDirectory,
  });

  Future<String> crateApiDecryptVideo({
    required String cameraName,
    required String encFilename,
  });

  Future<void> crateApiDeregisterCamera({required String cameraName});

  Future<Uint8List> crateApiEncryptSettingsMessage({
    required String cameraName,
    required List<int> data,
  });

  Future<String> crateApiFlutterAddCamera({
    required String cameraName,
    required String ip,
    required List<int> secret,
    required bool standalone,
    required String ssid,
    required String password,
    required String pairingToken,
    required String credentialsFull,
  });

  Future<Uint8List> crateApiGenerateHeartbeatRequestConfigCommand({
    required String cameraName,
    required BigInt timestamp,
  });

  Future<String> crateApiGetGroupName({
    required String clientTag,
    required String cameraName,
  });

  Future<void> crateApiInitApp();

  Future<void> crateApiLoggerInitLogger();

  Future<bool> crateApiInitializeCamera({
    required String cameraName,
    required String fileDir,
    required bool firstTime,
  });

  Future<bool> crateApiLockManagerIsLockHeld({required String path});

  Future<Uint8List> crateApiLivestreamDecrypt({
    required String cameraName,
    required List<int> data,
    required BigInt expectedChunkNumber,
  });

  Future<bool> crateApiLivestreamUpdate({
    required String cameraName,
    required List<int> msg,
  });

  Future<bool> crateApiPingProprietaryDevice({required String cameraIp});

  Future<String> crateApiProcessHeartbeatConfigResponse({
    required String cameraName,
    required List<int> configResponse,
    required BigInt expectedTimestamp,
  });

  Future<void> crateApiLockManagerReleaseLock({required String path});

  Future<void> crateApiLoggerRustSetUp();

  Future<void> crateApiLoggerRustShutdown();

  Future<void> crateApiShutdownApp();

  Future<bool> crateApiLockManagerTryAcquireLock({required String path});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LevelFilter;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LevelFilter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LevelFilterPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SendToDartLogger;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SendToDartLogger;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SendToDartLoggerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<SendToDartLogger> crateApiLoggerSendToDartLoggerNew({
    required LevelFilter level,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
            level,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerSendToDartLoggerNewConstMeta,
        argValues: [level],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerSendToDartLoggerNewConstMeta =>
      const TaskConstMeta(
        debugName: "SendToDartLogger_new",
        argNames: ["level"],
      );

  @override
  Stream<LogEntry> crateApiLoggerSendToDartLoggerSetStreamSink() {
    final streamSink = RustStreamSink<LogEntry>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_log_entry_Sse(streamSink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 2,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta,
          argValues: [streamSink],
          apiImpl: this,
        ),
      ),
    );
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "SendToDartLogger_set_stream_sink",
        argNames: ["streamSink"],
      );

  @override
  Future<bool> crateApiLockManagerAcquireLock({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiLockManagerAcquireLockConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLockManagerAcquireLockConstMeta =>
      const TaskConstMeta(debugName: "acquire_lock", argNames: ["path"]);

  @override
  Stream<LogEntry> crateApiLoggerCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_log_entry_Sse(s, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 4,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiLoggerCreateLogStreamConstMeta,
          argValues: [s],
          apiImpl: this,
        ),
      ),
    );
    return s.stream;
  }

  TaskConstMeta get kCrateApiLoggerCreateLogStreamConstMeta =>
      const TaskConstMeta(debugName: "create_log_stream", argNames: ["s"]);

  @override
  Future<String> crateApiDecryptMessage({
    required String clientTag,
    required String cameraName,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(clientTag, serializer);
          sse_encode_String(cameraName, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDecryptMessageConstMeta,
        argValues: [clientTag, cameraName, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDecryptMessageConstMeta => const TaskConstMeta(
    debugName: "decrypt_message",
    argNames: ["clientTag", "cameraName", "data"],
  );

  @override
  Future<String> crateApiDecryptThumbnail({
    required String cameraName,
    required String encFilename,
    required String pendingMetaDirectory,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_String(encFilename, serializer);
          sse_encode_String(pendingMetaDirectory, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDecryptThumbnailConstMeta,
        argValues: [cameraName, encFilename, pendingMetaDirectory],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDecryptThumbnailConstMeta => const TaskConstMeta(
    debugName: "decrypt_thumbnail",
    argNames: ["cameraName", "encFilename", "pendingMetaDirectory"],
  );

  @override
  Future<String> crateApiDecryptVideo({
    required String cameraName,
    required String encFilename,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_String(encFilename, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDecryptVideoConstMeta,
        argValues: [cameraName, encFilename],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDecryptVideoConstMeta => const TaskConstMeta(
    debugName: "decrypt_video",
    argNames: ["cameraName", "encFilename"],
  );

  @override
  Future<void> crateApiDeregisterCamera({required String cameraName}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDeregisterCameraConstMeta,
        argValues: [cameraName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeregisterCameraConstMeta => const TaskConstMeta(
    debugName: "deregister_camera",
    argNames: ["cameraName"],
  );

  @override
  Future<Uint8List> crateApiEncryptSettingsMessage({
    required String cameraName,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEncryptSettingsMessageConstMeta,
        argValues: [cameraName, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEncryptSettingsMessageConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_settings_message",
        argNames: ["cameraName", "data"],
      );

  @override
  Future<String> crateApiFlutterAddCamera({
    required String cameraName,
    required String ip,
    required List<int> secret,
    required bool standalone,
    required String ssid,
    required String password,
    required String pairingToken,
    required String credentialsFull,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_String(ip, serializer);
          sse_encode_list_prim_u_8_loose(secret, serializer);
          sse_encode_bool(standalone, serializer);
          sse_encode_String(ssid, serializer);
          sse_encode_String(password, serializer);
          sse_encode_String(pairingToken, serializer);
          sse_encode_String(credentialsFull, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFlutterAddCameraConstMeta,
        argValues: [
          cameraName,
          ip,
          secret,
          standalone,
          ssid,
          password,
          pairingToken,
          credentialsFull,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFlutterAddCameraConstMeta => const TaskConstMeta(
    debugName: "flutter_add_camera",
    argNames: [
      "cameraName",
      "ip",
      "secret",
      "standalone",
      "ssid",
      "password",
      "pairingToken",
      "credentialsFull",
    ],
  );

  @override
  Future<Uint8List> crateApiGenerateHeartbeatRequestConfigCommand({
    required String cameraName,
    required BigInt timestamp,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_u_64(timestamp, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGenerateHeartbeatRequestConfigCommandConstMeta,
        argValues: [cameraName, timestamp],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGenerateHeartbeatRequestConfigCommandConstMeta =>
      const TaskConstMeta(
        debugName: "generate_heartbeat_request_config_command",
        argNames: ["cameraName", "timestamp"],
      );

  @override
  Future<String> crateApiGetGroupName({
    required String clientTag,
    required String cameraName,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(clientTag, serializer);
          sse_encode_String(cameraName, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGetGroupNameConstMeta,
        argValues: [clientTag, cameraName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGetGroupNameConstMeta => const TaskConstMeta(
    debugName: "get_group_name",
    argNames: ["clientTag", "cameraName"],
  );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<void> crateApiLoggerInitLogger() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerInitLoggerConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerInitLoggerConstMeta =>
      const TaskConstMeta(debugName: "init_logger", argNames: []);

  @override
  Future<bool> crateApiInitializeCamera({
    required String cameraName,
    required String fileDir,
    required bool firstTime,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_String(fileDir, serializer);
          sse_encode_bool(firstTime, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitializeCameraConstMeta,
        argValues: [cameraName, fileDir, firstTime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeCameraConstMeta => const TaskConstMeta(
    debugName: "initialize_camera",
    argNames: ["cameraName", "fileDir", "firstTime"],
  );

  @override
  Future<bool> crateApiLockManagerIsLockHeld({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiLockManagerIsLockHeldConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLockManagerIsLockHeldConstMeta =>
      const TaskConstMeta(debugName: "is_lock_held", argNames: ["path"]);

  @override
  Future<Uint8List> crateApiLivestreamDecrypt({
    required String cameraName,
    required List<int> data,
    required BigInt expectedChunkNumber,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          sse_encode_u_64(expectedChunkNumber, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLivestreamDecryptConstMeta,
        argValues: [cameraName, data, expectedChunkNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLivestreamDecryptConstMeta => const TaskConstMeta(
    debugName: "livestream_decrypt",
    argNames: ["cameraName", "data", "expectedChunkNumber"],
  );

  @override
  Future<bool> crateApiLivestreamUpdate({
    required String cameraName,
    required List<int> msg,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_list_prim_u_8_loose(msg, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLivestreamUpdateConstMeta,
        argValues: [cameraName, msg],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLivestreamUpdateConstMeta => const TaskConstMeta(
    debugName: "livestream_update",
    argNames: ["cameraName", "msg"],
  );

  @override
  Future<bool> crateApiPingProprietaryDevice({required String cameraIp}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraIp, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiPingProprietaryDeviceConstMeta,
        argValues: [cameraIp],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPingProprietaryDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "ping_proprietary_device",
        argNames: ["cameraIp"],
      );

  @override
  Future<String> crateApiProcessHeartbeatConfigResponse({
    required String cameraName,
    required List<int> configResponse,
    required BigInt expectedTimestamp,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(cameraName, serializer);
          sse_encode_list_prim_u_8_loose(configResponse, serializer);
          sse_encode_u_64(expectedTimestamp, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiProcessHeartbeatConfigResponseConstMeta,
        argValues: [cameraName, configResponse, expectedTimestamp],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiProcessHeartbeatConfigResponseConstMeta =>
      const TaskConstMeta(
        debugName: "process_heartbeat_config_response",
        argNames: ["cameraName", "configResponse", "expectedTimestamp"],
      );

  @override
  Future<void> crateApiLockManagerReleaseLock({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiLockManagerReleaseLockConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLockManagerReleaseLockConstMeta =>
      const TaskConstMeta(debugName: "release_lock", argNames: ["path"]);

  @override
  Future<void> crateApiLoggerRustSetUp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerRustSetUpConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerRustSetUpConstMeta =>
      const TaskConstMeta(debugName: "rust_set_up", argNames: []);

  @override
  Future<void> crateApiLoggerRustShutdown() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiLoggerRustShutdownConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerRustShutdownConstMeta =>
      const TaskConstMeta(debugName: "rust_shutdown", argNames: []);

  @override
  Future<void> crateApiShutdownApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiShutdownAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiShutdownAppConstMeta =>
      const TaskConstMeta(debugName: "shutdown_app", argNames: []);

  @override
  Future<bool> crateApiLockManagerTryAcquireLock({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiLockManagerTryAcquireLockConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLockManagerTryAcquireLockConstMeta =>
      const TaskConstMeta(debugName: "try_acquire_lock", argNames: ["path"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LevelFilter =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LevelFilter =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SendToDartLogger =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SendToDartLogger =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LevelFilter
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LevelFilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LevelFilter
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LevelFilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LevelFilter
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LevelFilterImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SendToDartLogger
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LevelFilter
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LevelFilterImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SendToDartLogger
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
      timeMillis: var_timeMillis,
      level: var_level,
      tag: var_tag,
      msg: var_msg,
    );
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    LevelFilter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LevelFilterImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    SendToDartLogger self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SendToDartLoggerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
    LevelFilter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LevelFilterImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
    SendToDartLogger self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SendToDartLoggerImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
    RustStreamSink<LogEntry> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class LevelFilterImpl extends RustOpaque implements LevelFilter {
  // Not to be used by end users
  LevelFilterImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LevelFilterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LevelFilter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LevelFilter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LevelFilterPtr,
  );
}

@sealed
class SendToDartLoggerImpl extends RustOpaque implements SendToDartLogger {
  // Not to be used by end users
  SendToDartLoggerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SendToDartLoggerImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SendToDartLogger,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SendToDartLogger,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SendToDartLoggerPtr,
  );
}
